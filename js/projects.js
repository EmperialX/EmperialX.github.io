class ProjectManager{constructor(){this.projects=[],this.categories=[],this.currentCategory="all",this.csrfToken=document.querySelector('meta[name="csrf-token"]')?.content}async loadProjects(){try{const t=await fetch("/data/projects.json",{method:"GET",headers:{Accept:"application/json","X-Requested-With":"XMLHttpRequest","X-CSRF-Token":this.csrfToken},credentials:"same-origin"});if(!t.ok)throw new Error("Network response was not ok");const e=await t.json();if(!this.validateData(e))throw new Error("Invalid data structure");this.projects=e.projects,this.categories=e.categories,this.renderProjects(),this.setupCategoryFilters()}catch(t){console.error("Error loading projects:",t),this.handleError("Failed to load projects")}}validateData(t){return t&&Array.isArray(t.categories)&&Array.isArray(t.projects)&&t.projects.every(this.validateProject)}validateProject(t){return t&&"string"==typeof t.id&&"string"==typeof t.title&&"string"==typeof t.category&&"string"==typeof t.year&&"string"==typeof t.description&&Array.isArray(t.tools)&&"string"==typeof t.image&&t.links&&"string"==typeof t.links.github&&t.links.github.startsWith("https://github.com/")}sanitizeHTML(t){const e=document.createElement("div");return e.textContent=t,e.innerHTML}createProjectCard(t){const e=this.sanitizeHTML(t.title),r=this.sanitizeHTML(t.category),s=this.sanitizeHTML(t.description),n=this.sanitizeHTML(t.longDescription),a=t.tools.map((t=>this.sanitizeHTML(t))),o=this.validateURL(t.links.github),i=t.links.docs?this.validateURL(t.links.docs):"#";return`\n            <article class="project-box glass-card" data-category="${r}">\n                <div class="project-featured-image">\n                    <img src="${this.sanitizeHTML(t.image)}" \n                         alt="${e} Screenshot"\n                         loading="lazy">\n                </div>\n                <div class="project-content">\n                    <div>\n                        <div class="project-header">\n                            <h3>${e}</h3>\n                            <span class="project-year">${t.year}</span>\n                        </div>\n                        <p class="project-description">${s}</p>\n                        <div class="project-details">\n                            <h4>About this Project</h4>\n                            <p>${n}</p>\n                            <div class="tech-stack">\n                                ${a.map((t=>`<span>${t}</span>`)).join("")}\n                            </div>\n                        </div>\n                    </div>\n                    <div class="project-links">\n                        <a href="${o}" class="project-link" \n                           target="_blank" rel="noopener noreferrer">\n                            <i class="fab fa-github"></i>\n                            View Code\n                        </a>\n                        ${t.links.docs?`\n                            <a href="${i}" class="project-link"\n                               target="_blank" rel="noopener noreferrer">\n                                <i class="fas fa-book"></i>\n                                Docs\n                            </a>\n                        `:""}\n                    </div>\n                </div>\n            </article>\n        `}validateURL(t){try{const e=new URL(t);if(!e.hostname.includes("github.com"))throw new Error("Invalid domain");return e.href}catch(t){return console.error("Invalid URL:",t),"#"}}handleError(t){const e=document.querySelector(".projects-showcase");e&&(e.innerHTML=`\n                <div class="error-message">\n                    <i class="fas fa-exclamation-triangle"></i>\n                    ${this.sanitizeHTML(t)}\n                </div>\n            `)}renderProjects(t="all"){const e=document.querySelector(".projects-showcase");if(!e)return;const r="all"===t?this.projects:this.projects.filter((e=>e.category.toLowerCase()===t.toLowerCase()));e.innerHTML=r.map((t=>this.createProjectCard(t))).join("")}setupCategoryFilters(){const t=document.querySelector(".project-categories");if(!t)return;const e=["all",...new Set(this.categories)];t.innerHTML=e.map((t=>`\n                <button class="category-btn${"all"===t?" active":""}" \n                        data-category="${t}">\n                    ${t.charAt(0).toUpperCase()+t.slice(1)}\n                </button>\n            `)).join(""),t.querySelectorAll(".category-btn").forEach((e=>{e.addEventListener("click",(()=>{t.querySelectorAll(".category-btn").forEach((t=>t.classList.remove("active"))),e.classList.add("active"),this.currentCategory=e.dataset.category,this.renderProjects(this.currentCategory)}))}))}}document.addEventListener("DOMContentLoaded",(()=>{(new ProjectManager).loadProjects()}));