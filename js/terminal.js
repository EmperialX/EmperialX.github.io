class Terminal{constructor(){this.commands={},this.history=[],this.historyIndex=-1,this.terminalInitialized=!1,this.isActive=!1,this.initializeTerminal(),this.loadCommands(),this.defaultCommands={projects:{description:"List all projects",output:["ðŸ”¹ XSS Automation - Finding xss Vulnerabilities","ðŸ”¹ Quickdir - Powershell Directory shortcuts","ðŸ”¹ Web Reconnaissance Tool - Information Gathering"]},challenges:{description:"List available challenges",output:["ðŸŽ¯ Web Security Challenges","ðŸŽ¯ Reverse Engineering Tasks","ðŸŽ¯ Digital Forensics Cases","Type 'challenge <name>' for details"]},theme:{description:"Toggle dark/light theme",handler:()=>this.toggleTheme()}}}async loadCommands(){try{const t=await fetch("/data/terminal.json"),e=await t.json();this.commands={...e.commands,...this.defaultCommands},this.easterEggs=e.easter_eggs}catch(t){console.error("Failed to load terminal commands:",t),this.commands=this.defaultCommands}}initializeTerminal(){if(this.terminalInitialized)return;this.terminalInitialized=!0;document.body.insertAdjacentHTML("beforeend",'\n            <div class="terminal-container">\n                <div class="terminal-header">\n                    <div class="terminal-title">\n                        <i class="fas fa-terminal"></i>\n                        <span>terminal@shashi.raj</span>\n                    </div>\n                    <div class="terminal-controls">\n                        <button class="terminal-btn terminal-minimize"></button>\n                        <button class="terminal-btn terminal-maximize"></button>\n                        <button class="terminal-btn terminal-close"></button>\n                    </div>\n                </div>\n                <div class="terminal-body">\n                    <div class="terminal-output"></div>\n                    <div class="terminal-prompt">\n                        <span class="prompt-user">guest</span>\n                        <span class="prompt-symbol">$</span>\n                        <input type="text" class="terminal-input" autofocus spellcheck="false">\n                    </div>\n                </div>\n            </div>\n            <button class="terminal-trigger">\n                <i class="fas fa-terminal"></i>\n            </button>\n        '),this.setupEventListeners()}setupEventListeners(){const t=document.querySelector(".terminal-trigger"),e=document.querySelector(".terminal-container"),s=document.querySelector(".terminal-input"),i=document.querySelector(".terminal-close"),n=document.querySelector(".terminal-minimize"),a=document.querySelector(".terminal-maximize");t.addEventListener("click",(()=>{e.style.display="block",requestAnimationFrame((()=>{e.classList.add("active"),this.isActive=!0,s.focus(),e.dataset.welcomed||(this.addToOutput('Welcome! Type "help" for available commands',"terminal-success"),e.dataset.welcomed="true")}))}));const o=()=>{e.classList.remove("active"),this.isActive=!1,setTimeout((()=>e.style.display="none"),300)};i.addEventListener("click",o),n.addEventListener("click",o),a.addEventListener("click",(()=>{e.classList.toggle("maximized"),s.focus()})),document.addEventListener("click",(s=>{!this.isActive||e.contains(s.target)||t.contains(s.target)||o()})),e.addEventListener("click",(t=>{t.stopPropagation()})),document.addEventListener("keydown",(t=>{!this.isActive||t.ctrlKey||t.altKey||t.metaKey||t.target!==s&&s.focus()})),s.addEventListener("keydown",(t=>{if("Enter"===t.key){t.preventDefault();const e=s.value.trim();e&&(this.handleCommand(e),s.value="")}"Tab"===t.key&&(t.preventDefault(),this.handleTabCompletion(s.value)),"ArrowUp"===t.key&&(t.preventDefault(),this.navigateHistory("up")),"ArrowDown"===t.key&&(t.preventDefault(),this.navigateHistory("down"))})),this.commands.theme={description:"Toggle dark/light theme",handler:()=>{const t=document.documentElement,e="dark"===(t.getAttribute("data-theme")||"dark")?"light":"dark";t.setAttribute("data-theme",e),localStorage.setItem("theme",e),this.addToOutput(`Theme switched to ${e} mode`,"terminal-success")}},setInterval((()=>this.updateSystemTime()),1e3)}handleCommand(t){const e=t.trim().toLowerCase();switch(this.addToOutput(`<span class="prompt-user">guest</span><span class="prompt-symbol">$ </span>${e}`),e&&(this.history.push(e),this.historyIndex=this.history.length),e){case"clear":return void this.clearTerminal();case"theme":return void this.toggleTheme();case"exit":return this.addToOutput("Closing terminal..."),void setTimeout((()=>{const t=document.querySelector(".terminal-container");t.classList.remove("active"),this.isActive=!1,setTimeout((()=>{t.style.display="none",this.clearTerminal()}),300)}),500)}if(this.commands[e]){const t=this.commands[e];t.handler?t.handler():t.output&&(Array.isArray(t.output)?t.output.forEach((t=>this.addToOutput(t))):this.addToOutput(t.output))}else this.easterEggs?.[e]?this.addToOutput(this.easterEggs[e],"terminal-success"):this.addToOutput(`Command not found: ${e}`,"terminal-error")}triggerMatrixEffect(){const t=document.querySelector(".terminal-body");t.classList.add("matrix-effect"),setTimeout((()=>t.classList.remove("matrix-effect")),3e3)}updateSystemTime(){if(this.isActive){const t=new Date;document.querySelector(".terminal-title span").textContent=`terminal@shashi.raj | ${t.toLocaleTimeString()}`}}handleTabCompletion(t){if(!t)return;const e=document.querySelector(".terminal-input"),s=[...Object.keys(this.commands||{}),...Object.keys(this.easterEggs||{})].filter((e=>e.toLowerCase().startsWith(t.toLowerCase())));1===s.length?e.value=s[0]:s.length>1&&(this.addToOutput("\nMatching commands:"),s.forEach((t=>{const e=this.commands[t]?.description||"";this.addToOutput(`${t.padEnd(15)} - ${e}`)})))}toggleTheme(){const t=document.documentElement,e=document.querySelector(".theme-toggle i"),s="dark"===(t.getAttribute("data-theme")||"dark")?"light":"dark";t.setAttribute("data-theme",s),localStorage.setItem("theme",s),e&&(e.className="dark"===s?"fas fa-moon":"fas fa-sun"),this.addToOutput(`Theme switched to ${s} mode`,"terminal-success")}addToOutput(t,e=""){const s=document.querySelector(".terminal-output");if(!s)return;const i=document.createElement("div");i.innerHTML=t,e&&i.classList.add(e),s.appendChild(i),s.scrollTop=s.scrollHeight}clearTerminal(){const t=document.querySelector(".terminal-output");t&&(t.innerHTML="")}navigateHistory(t){const e=document.querySelector(".terminal-input");"up"===t&&this.historyIndex>0&&(this.historyIndex--,e.value=this.history[this.historyIndex]),"down"===t&&this.historyIndex<this.history.length-1&&(this.historyIndex++,e.value=this.history[this.historyIndex])}}document.addEventListener("DOMContentLoaded",(()=>{new Terminal}));